Tree creation can be done by two ways-


Pre order - root—— left —right


Inorder - clockwise ——  left — root —— right


Post order —— left —— right —— root






import java.util.Arrays;
import java.util.HashMap;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {

    static class Node {
        int data;
        Node left;
        Node right;

        public Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    // here its dynamic logic to create the tree
    static class BinaryTree{
        static int idx = -1;

        public static Node returnTree(int[] nodes)
        {
            idx++;
            if(nodes[idx] == -1) return null;
            Node mynode = new Node(nodes[idx]);
            mynode.left = returnTree(nodes);
            mynode.right = returnTree(nodes);
            return mynode;
        }

        void preOrder(Node root)
        {
            if(root == null) return;
            System.out.print(root.data);
            inOrder(root.left);
            inOrder(root.right);
        }

        void inOrder(Node root){
            if(root == null) return;
            inOrder(root.left);
            System.out.print(root.data);
            inOrder(root.right);
        }




        void postOrder(Node root){
            if(root == null) return;

            postOrder(root.left);
            postOrder(root.right);
            System.out.print(root.data);
        }
    }


    public static void main(String[] args) {
        int[] nodes = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
        BinaryTree bt = new BinaryTree();
        Node root =  bt.returnTree(nodes);

        bt.preOrder(root);
        
        bt.inOrder(root);
        bt.postOrder(root);

    }
}



____________________


