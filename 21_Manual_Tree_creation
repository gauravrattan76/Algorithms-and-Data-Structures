Tree without recursion-
import java.util.Arrays;
import java.util.HashMap;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {

    static class Node {
        int data;
        Node left;
        Node right;

        public Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }


    static class BinaryTree {
        Node root;

        void preOrder(Node root){
            if(root == null) return;
            System.out.print(root.data);
            preOrder(root.left);
            preOrder(root.right);
        }

        void inOrder(Node root){
            if(root == null) return;
            inOrder(root.left);
            System.out.print(root.data);
            inOrder(root.right);
        }


        void postOrder(Node root){
            if(root == null) return;

            postOrder(root.left);
            postOrder(root.right);
            System.out.print(root.data);
        }

    }


    public static void main(String[] args) {
       BinaryTree tree = new BinaryTree();
        tree.root = new Node(1);
        tree.root.left = new Node(2);
        tree.root.right = new Node(3);
        tree.root.left.left = new Node(4);
        tree.root.left.right = new Node(5);
        tree.root.right.right = new Node(6);

          tree.preOrder(tree.root);
          System.out.println("***");
        tree.inOrder(tree.root);
        System.out.println("***");
        tree.postOrder(tree.root);
    }
}




