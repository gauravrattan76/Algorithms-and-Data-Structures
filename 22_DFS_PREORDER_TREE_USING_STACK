Learn dfs using stack-


Pre order using stack-




import java.util.Arrays;
import java.util.HashMap;
import java.util.Stack;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {

    static class Node {
        int data;
        Node left;
        Node right;

        public Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    // here its dynamic logic to create the tree
    static class BinaryTree{
        static int idx = -1;

        public static Node returnTree(int[] nodes)
        {
            idx++;
            if(nodes[idx] == -1) return null;
            Node mynode = new Node(nodes[idx]);
            mynode.left = returnTree(nodes);
            mynode.right = returnTree(nodes);
            return mynode;
        }

       static void preOrder(Node root)
{
    if(root == null) return;
    Stack<Node> st = new Stack<Node>();
    st.push(root);

    while(!st.isEmpty())
    {
        Node node = st.pop();
        System.out.print(node.data);

        if(node.right != null) st.push(node.right);
        if(node.left != null) st.push(node.left);
    }
}







    }


    public static void main(String[] args) {
        int[] nodes = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
        BinaryTree bt = new BinaryTree();
      Node root =   BinaryTree.returnTree(nodes);
      BinaryTree.preOrder(root);




    }
}




