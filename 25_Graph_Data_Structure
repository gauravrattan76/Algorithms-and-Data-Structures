Graphs Data Structure-
________________________________

Node/ Vertex -

Is the node for that graph.
We also call it edge 
UniDirectional Graph-


V1   ……> v2

Bidirectional graphs
To and from between x and y
_____________________________________

Weight graphs-

A >>>>>.b.  there is a weight of 10

Weighted graph will have some weights
___________________________________

Un weighted graph doesn’t have any weights


We will have undirected and lighted graph


We can also have directed and unweighted graph

__________________________________

Adjacency list graphs-


List of lists

Array of array list


Array size is equal to number of vertex


And on each index item we will create list on each item index

So graph is an array of array list


We can say 


Arraylist<Edge> graph[vertx]


So each element in array consists of array list


Graphs Data Structure-
________________________________


Node/ Vertex -

Is the node for that graph.
We also call it edge 
UniDirectional Graph-


V1   ……> v2

Bidirectional graphs
To and from between x and y
_____________________________________

Weight graphs-

A >>>>>.b.  there is a weight of 10

Weighted graph will have some weights
___________________________________

Un weighted graph doesn’t have any weights


We will have undirected and lighted graph


We can also have directed and unweighted graph

__________________________________

Adjacency list graphs-


List of lists

Array of array list


Array size is equal to number of vertex


And on each index item we will create list on each item index





So graph is an array of array list


We can say 


Arraylist<Edge> graph[vertx]


So each element in array consists of array list


Array list.add(new Edge(sec, des))


Class Edge{
Int src;
Int des;
}


_______________________


Create an Array of Arraylist

Each item in array is array list of edges

import java.util.*;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {
    // create an edge class with src and destination
    static class Edge {
        int src;
        int des;

        public Edge(int s, int d) {
            this.src = s;
            this.des = d;
        }
    }

    public static void createGraph(ArrayList<Edge>[] graph) {
        // intialise emoty arraylist rather tahn null
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        // each index of array add edges to array list
        graph[0].add(new Edge(0, 2));
        graph[1].add(new Edge(1, 2));
        graph[1].add(new Edge(1, 3));
        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 3));
        graph[2].add(new Edge(2, 1));
        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3, 2));
    }


    public static void main(String[] args) {
        int v = 4;

        // graph is array of arraylist whjere arraylist cintains the edges
        // create the array here
        ArrayList<Edge>[] graph = new ArrayList[v];
        createGraph(graph);

        //to get the destination at specific indexes
        for (int i = 0; i < graph[2].size(); i++) {
            Edge ed = graph[2].get(i);
            System.out.println("destination is +" + ed.des);

        }

    }
}








