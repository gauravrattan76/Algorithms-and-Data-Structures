In order traversal-
__________________-


Called ignorer as root node comes in the centre


Left root 


Root


Right subtree


_______________________


import java.util.Arrays;

class Main{
    class Node{
        int data;
        Node left;
        Node right;

        Node(int data)
        {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    class BinaryTree{
        static int idx = -1;

        public Node returnTree(int[] nodes)
        {
            idx++;
            if(nodes[idx] == -1)
            {
                return null;
            }

            Node n = new Node(nodes[idx]);
            n.left = returnTree(nodes);
            n.right = returnTree(nodes);
            return n;
        }

        public void preorder(Node root)
        {
            if(root == null){
                System.out.println(-1);
                return;
            }
            System.out.println(root.data);
            preorder(root.left);
            preorder(root.right);
        }

        public void inorder(Node root)
        {
            if(root == null){
                System.out.println(-1);
                return;
            }
            preorder(root.left);
            System.out.println(root.data);
            preorder(root.right);
        }
    }

    public static void main(String[] args)
    {
        int nodes[] = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
        Main m = new Main();
        Main.BinaryTree mb = m.new BinaryTree();
        Node rnode = mb.returnTree(nodes);
        System.out.println(rnode.data);
        System.out.println("*******");
         mb.preorder(rnode);
        System.out.println("*******");
         mb.inorder(rnode);
    }
}
