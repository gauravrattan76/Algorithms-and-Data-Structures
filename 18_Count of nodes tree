Count of nodes -


First count left subtree

Then count right subtree;

Then return left + right + 1;


import java.util.LinkedList;
import java.util.Queue;

class Main {
    class Node {
        int data;
        Node left;
        Node right;

        Node(int data) {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }

    class bTree {
        static int idx = -1;

        public Node buildTree(int[] num) {
            idx++;
            if (num[idx] == -1) {
                return null;
            }
            Node n = new Node(num[idx]);
            n.left = buildTree(num);
            n.right = buildTree(num);
            return n;
        }

        public void levelOrder(Node root) {
            if (root == null) {
                return;
            }
            Queue<Node> q = new LinkedList<>();
            q.add(root);
            q.add(null);

            while (!q.isEmpty()) {
                Node el = q.remove();
                if (el == null) {
                    System.out.println();
                    if (q.isEmpty()) {
                        break;
                    } else {
                        q.add(null);
                    }
                } else {
                    System.out.print(el.data);
                    if (el.left != null) {
                        q.add(el.left);
                    }
                    if (el.right != null) {
                        q.add(el.right);
                    }

                }
            }

        }

        public int countOfNodes(Node root)
        {
            if(root ==null)
            {
                return 0;
            }
           int leftCount= countOfNodes(root.left);
           int rightCount = countOfNodes(root.right);
            return leftCount + rightCount + 1;

        }
    }


    public static void main(String[] args) {
        int[] nodes = {1, 2, 4, -1, -1, 5, -1, -1, 3, -1, 6, -1, -1};
        Main m = new Main();
        Main.bTree bt = m.new bTree();
        Node rnode = bt.buildTree(nodes);
        System.out.println(rnode.data);
        System.out.println("***");
        bt.levelOrder(rnode);
        System.out.println(bt.countOfNodes(rnode));
    }
}
