DFS in graphs -


Create in array list first print current, then  run a lopp only when visited is false
public static void dfs(ArrayList<Edge> graph[], int curr, boolean vis[]) {
    System.out.println("val is+" + curr);
    vis[curr] = true;
    for (int i = 0; i < graph[curr].size(); i++) {
        Edge e = graph[curr].get(i);
        if (vis[e.des] == false) {
            dfs(graph, e.des, vis);
        }
    }
}



__________________



import java.util.*;

//TIP To <b>Run</b> code, press <shortcut actionId="Run"/> or
// click the <icon src="AllIcons.Actions.Execute"/> icon in the gutter.
public class Main {
    // create an edge class with src and destination
    static class Edge {
        int src;
        int des;


        public Edge(int s, int d) {
            this.src = s;
            this.des = d;

        }
    }

    public static void createGraph(ArrayList<Edge>[] graph) {
        // intialise emoty arraylist rather tahn null
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<Edge>();
        }

        // each index of array add edges to array list
        graph[0].add(new Edge(0, 2));
        graph[0].add(new Edge(0, 1));
        graph[1].add(new Edge(1, 0));
        graph[1].add(new Edge(1, 3));
        graph[2].add(new Edge(2, 0));
        graph[2].add(new Edge(2, 4));
        graph[3].add(new Edge(3, 1));
        graph[3].add(new Edge(3,4));
        graph[3].add(new Edge(3,5));
        graph[4].add(new Edge(4, 2));
        graph[4].add(new Edge(4, 3));
        graph[4].add(new Edge(4, 5));
        graph[5].add(new Edge(5, 6));
        graph[5].add(new Edge(5, 3));
        graph[5].add(new Edge(5, 4));
        graph[6].add(new Edge(6, 5));
    }

    public static void printLevel(ArrayList<Edge>[] graph, int v){
        Queue<Integer> q = new LinkedList();
        q.add(0);
        boolean[] visited = new boolean[v];
        while(!q.isEmpty())
        {
            int curr = q.remove();

            if(visited[curr] == false)
            {
              System.out.println("value is " + curr);
                visited[curr] = true;
              for(int i = 0; i < graph[curr].size() ; i ++)
              {
                  Edge e = graph[curr].get(i);
                  q.add(e.des);
              }
            }

        }
    }

    public static void dfs(ArrayList<Edge> graph[], int curr, boolean vis[]) {
        System.out.println("val is+" + curr);
        vis[curr] = true;
        for (int i = 0; i < graph[curr].size(); i++) {
            Edge e = graph[curr].get(i);
            if (vis[e.des] == false) {
                dfs(graph, e.des, vis);
            }
        }


    }


    public static void main(String[] args) {
        int v = 7;

        // graph is array of arraylist whjere arraylist cintains the edges
        // create the array here
        ArrayList<Edge>[] graph = new ArrayList[v];
        createGraph(graph);
        printLevel(graph, v);

        //to get the destination at specific indexes
//        for (int i = 0; i < graph[2].size(); i++) {
//            Edge ed = graph[2].get(i);
//            System.out.println("destination is +" + ed.des);
//
//        }
     boolean[] vis = new boolean[7];
     vis[0] = false;
     dfs(graph,0,vis);

    }
}

